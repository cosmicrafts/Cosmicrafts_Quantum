// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0649
#pragma warning disable 1522
#pragma warning disable 0414
#pragma warning disable 0219
#pragma warning disable 0109

namespace Quantum {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  public enum EEffectAreaState : byte {
    Init,
    Active,
    Finished,
  }
  public enum EEffectAreaTarget : byte {
    Enemy,
    Friendly,
  }
  public enum EGameplayState : int {
    WaitingForPlayers,
    Warmup,
    Match,
    Overtime,
    MatchEnd,
    Deactivate,
  }
  public enum EHealthAction : byte {
    None,
    Add,
    Remove,
  }
  [PreserveInPrototype()]
  public enum ERarity : byte {
    Common,
    Uncommon,
    Rare,
    Epic,
    Legendary,
  }
  public enum EStatType : byte {
    AttackSpeed = 1,
    MovementSpeed = 2,
  }
  public enum ETargetType : byte {
    None,
    Building,
    UnitGround,
    UnitAir,
  }
  [Flags()]
  public enum ETargetTypeFlags : int {
    None = 0,
    Building = 1,
    UnitGround = 2,
    UnitAir = 4,
  }
  public enum EWeaponState : int {
    Idle,
    AttackStart,
    AttackCooldown,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
  }
  public static unsafe partial class InputButtons_ext {
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet1024 {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[16];
    public const Int32 BitsSize = 1024;
    public Int32 Length {
      get {
        return 1024;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet1024*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 1024, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet1024* set) {
      Native.Utils.Clear(&set->bits[0], 128);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet1024* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet1024 FromArray(UInt64[] values) {
      Assert.Always(16 == values.Length);
      BitSet1024 result = default;
      for (int i = 0; i < 16; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 128);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 37;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 16);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet1024*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 16);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet128* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet128* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet128* set) {
      Native.Utils.Clear(&set->bits[0], 16);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet128* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 41;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet2048* set) {
      Native.Utils.Clear(&set->bits[0], 256);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet2048* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 43;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet256* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet256* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet256* set) {
      Native.Utils.Clear(&set->bits[0], 32);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet256* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 47;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet4096* set) {
      Native.Utils.Clear(&set->bits[0], 512);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet4096* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 53;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet512* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet512* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet512* set) {
      Native.Utils.Clear(&set->bits[0], 64);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet512* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 59;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet6* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet6* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet6* set) {
      Native.Utils.Clear(&set->bits[0], 8);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet6* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 61;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(CardSettings))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefCardSettings : IEquatable<AssetRefCardSettings>, IAssetRef<CardSettings> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefCardSettings(CardSettings value) {
      var r = default(AssetRefCardSettings);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefCardSettings other && Equals(other);
    }
    public Boolean Equals(AssetRefCardSettings other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefCardSettings a, AssetRefCardSettings b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefCardSettings a, AssetRefCardSettings b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 67;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefCardSettings*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GameplaySettings))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGameplaySettings : IEquatable<AssetRefGameplaySettings>, IAssetRef<GameplaySettings> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGameplaySettings(GameplaySettings value) {
      var r = default(AssetRefGameplaySettings);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGameplaySettings other && Equals(other);
    }
    public Boolean Equals(AssetRefGameplaySettings other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGameplaySettings a, AssetRefGameplaySettings b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGameplaySettings a, AssetRefGameplaySettings b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 71;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGameplaySettings*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BlockedArea {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    public QBoolean Enabled;
    [FieldOffset(8)]
    public EntityRef Entity;
    [FieldOffset(0)]
    public SByte MaxX;
    [FieldOffset(1)]
    public SByte MaxY;
    [FieldOffset(2)]
    public SByte MinX;
    [FieldOffset(3)]
    public SByte MinY;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 73;
        hash = hash * 31 + Enabled.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + MaxX.GetHashCode();
        hash = hash * 31 + MaxY.GetHashCode();
        hash = hash * 31 + MinX.GetHashCode();
        hash = hash * 31 + MinY.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BlockedArea*)ptr;
        serializer.Stream.Serialize(&p->MaxX);
        serializer.Stream.Serialize(&p->MaxY);
        serializer.Stream.Serialize(&p->MinX);
        serializer.Stream.Serialize(&p->MinY);
        QBoolean.Serialize(&p->Enabled, serializer);
        EntityRef.Serialize(&p->Entity, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BuffBehavior_Duration {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public FP Duration;
    [FieldOffset(8)]
    public FP DurationPerLevelIncrease;
    [FieldOffset(16)]
    public FP MaxDuration;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 79;
        hash = hash * 31 + Duration.GetHashCode();
        hash = hash * 31 + DurationPerLevelIncrease.GetHashCode();
        hash = hash * 31 + MaxDuration.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BuffBehavior_Duration*)ptr;
        FP.Serialize(&p->Duration, serializer);
        FP.Serialize(&p->DurationPerLevelIncrease, serializer);
        FP.Serialize(&p->MaxDuration, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BuffBehavior_HealthOverTime {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(2)]
    public EHealthAction Action;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Byte RemainingTicks;
    [FieldOffset(1)]
    public Byte TickCount;
    [FieldOffset(8)]
    public FP TickTime;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public FP TimeToTick;
    [FieldOffset(24)]
    public FP ValuePerLevelIncrease;
    [FieldOffset(32)]
    public FP ValuePerTick;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 83;
        hash = hash * 31 + (Byte)Action;
        hash = hash * 31 + RemainingTicks.GetHashCode();
        hash = hash * 31 + TickCount.GetHashCode();
        hash = hash * 31 + TickTime.GetHashCode();
        hash = hash * 31 + TimeToTick.GetHashCode();
        hash = hash * 31 + ValuePerLevelIncrease.GetHashCode();
        hash = hash * 31 + ValuePerTick.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BuffBehavior_HealthOverTime*)ptr;
        serializer.Stream.Serialize(&p->RemainingTicks);
        serializer.Stream.Serialize(&p->TickCount);
        serializer.Stream.Serialize((Byte*)&p->Action);
        FP.Serialize(&p->TickTime, serializer);
        FP.Serialize(&p->TimeToTick, serializer);
        FP.Serialize(&p->ValuePerLevelIncrease, serializer);
        FP.Serialize(&p->ValuePerTick, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BuffBehavior_Stats {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP AbsoluteValue;
    [FieldOffset(16)]
    public FP PercentValue;
    [FieldOffset(0)]
    public EStatType StatType;
    [FieldOffset(24)]
    public FP ValuePerLevelIncrease;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 89;
        hash = hash * 31 + AbsoluteValue.GetHashCode();
        hash = hash * 31 + PercentValue.GetHashCode();
        hash = hash * 31 + (Byte)StatType;
        hash = hash * 31 + ValuePerLevelIncrease.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BuffBehavior_Stats*)ptr;
        serializer.Stream.Serialize((Byte*)&p->StatType);
        FP.Serialize(&p->AbsoluteValue, serializer);
        FP.Serialize(&p->PercentValue, serializer);
        FP.Serialize(&p->ValuePerLevelIncrease, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CardInfo {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public FP BaseHealth;
    [FieldOffset(8)]
    public AssetRefCardSettings CardSettings;
    [FieldOffset(24)]
    public FP Damage;
    [FieldOffset(0)]
    public Byte Level;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 97;
        hash = hash * 31 + BaseHealth.GetHashCode();
        hash = hash * 31 + CardSettings.GetHashCode();
        hash = hash * 31 + Damage.GetHashCode();
        hash = hash * 31 + Level.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CardInfo*)ptr;
        serializer.Stream.Serialize(&p->Level);
        Quantum.AssetRefCardSettings.Serialize(&p->CardSettings, serializer);
        FP.Serialize(&p->BaseHealth, serializer);
        FP.Serialize(&p->Damage, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct EffectAreaBehavior_Buff {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefEntityPrototype Buff;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 101;
        hash = hash * 31 + Buff.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (EffectAreaBehavior_Buff*)ptr;
        AssetRefEntityPrototype.Serialize(&p->Buff, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct EffectAreaBehavior_Damage {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Damage;
    [FieldOffset(8)]
    public FP DamagePerLevelPercent;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 103;
        hash = hash * 31 + Damage.GetHashCode();
        hash = hash * 31 + DamagePerLevelPercent.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (EffectAreaBehavior_Damage*)ptr;
        FP.Serialize(&p->Damage, serializer);
        FP.Serialize(&p->DamagePerLevelPercent, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HealthData {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EHealthAction Action;
    [FieldOffset(8)]
    public QBoolean HideToStats;
    [FieldOffset(16)]
    public EntityRef Source;
    [FieldOffset(24)]
    public EntityRef Target;
    [FieldOffset(4)]
    public PlayerRef TargetOwner;
    [FieldOffset(32)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 107;
        hash = hash * 31 + (Byte)Action;
        hash = hash * 31 + HideToStats.GetHashCode();
        hash = hash * 31 + Source.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        hash = hash * 31 + TargetOwner.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HealthData*)ptr;
        serializer.Stream.Serialize((Byte*)&p->Action);
        PlayerRef.Serialize(&p->TargetOwner, serializer);
        QBoolean.Serialize(&p->HideToStats, serializer);
        EntityRef.Serialize(&p->Source, serializer);
        EntityRef.Serialize(&p->Target, serializer);
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public const int MAX_COUNT = 6;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 109;
        return hash;
      }
    }
    public static Input Read(FrameSerializer serializer) {
      Input i = new Input();
      Serialize(&i, serializer);
      return i;
    }
    public static void Write(FrameSerializer serializer, Input i) {
      Serialize(&i, serializer);
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
      }
      return false;
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
      }
      return false;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerArea {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    [FreeOnComponentRemoved()]
    [FramePrinter.PtrQListAttribute(typeof(BlockedArea))]
    private Quantum.Ptr BlockedAreasPtr;
    [FieldOffset(0)]
    public SByte MaxX;
    [FieldOffset(1)]
    public SByte MaxY;
    [FieldOffset(2)]
    public SByte MinX;
    [FieldOffset(3)]
    public SByte MinY;
    public QListPtr<BlockedArea> BlockedAreas {
      get {
        return new QListPtr<BlockedArea>(BlockedAreasPtr);
      }
      set {
        BlockedAreasPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 113;
        hash = hash * 31 + BlockedAreasPtr.GetHashCode();
        hash = hash * 31 + MaxX.GetHashCode();
        hash = hash * 31 + MaxY.GetHashCode();
        hash = hash * 31 + MinX.GetHashCode();
        hash = hash * 31 + MinY.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      if (BlockedAreasPtr != default) f.FreeList(BlockedAreas);
      BlockedAreasPtr = default;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerArea*)ptr;
        serializer.Stream.Serialize(&p->MaxX);
        serializer.Stream.Serialize(&p->MaxY);
        serializer.Stream.Serialize(&p->MinX);
        serializer.Stream.Serialize(&p->MinY);
        QList.Serialize(p->BlockedAreas, &p->BlockedAreasPtr, serializer, StaticDelegates.SerializeBlockedArea);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ProjectileBehavior_AoE {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP Damage;
    [FieldOffset(16)]
    public FP DamagePerLevelPercent;
    [FieldOffset(0)]
    public AssetRefEntityPrototype Prototype;
    [FieldOffset(24)]
    public FP Radius;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 127;
        hash = hash * 31 + Damage.GetHashCode();
        hash = hash * 31 + DamagePerLevelPercent.GetHashCode();
        hash = hash * 31 + Prototype.GetHashCode();
        hash = hash * 31 + Radius.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ProjectileBehavior_AoE*)ptr;
        AssetRefEntityPrototype.Serialize(&p->Prototype, serializer);
        FP.Serialize(&p->Damage, serializer);
        FP.Serialize(&p->DamagePerLevelPercent, serializer);
        FP.Serialize(&p->Radius, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ProjectileBehavior_SingleTarget {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Damage;
    [FieldOffset(8)]
    public FP DamagePerLevelPercent;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 131;
        hash = hash * 31 + Damage.GetHashCode();
        hash = hash * 31 + DamagePerLevelPercent.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ProjectileBehavior_SingleTarget*)ptr;
        FP.Serialize(&p->Damage, serializer);
        FP.Serialize(&p->DamagePerLevelPercent, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct StatModifier {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP AbsoluteValue;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public EntityRef Owner;
    [FieldOffset(16)]
    public FP PercentValue;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 137;
        hash = hash * 31 + AbsoluteValue.GetHashCode();
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + PercentValue.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (StatModifier*)ptr;
        EntityRef.Serialize(&p->Owner, serializer);
        FP.Serialize(&p->AbsoluteValue, serializer);
        FP.Serialize(&p->PercentValue, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UnitBehavior_Lifetime {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP Duration;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public FP RemainingTime;
    [FieldOffset(0)]
    public QBoolean RemoveHealth;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public FP TickTime;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 139;
        hash = hash * 31 + Duration.GetHashCode();
        hash = hash * 31 + RemainingTime.GetHashCode();
        hash = hash * 31 + RemoveHealth.GetHashCode();
        hash = hash * 31 + TickTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UnitBehavior_Lifetime*)ptr;
        QBoolean.Serialize(&p->RemoveHealth, serializer);
        FP.Serialize(&p->Duration, serializer);
        FP.Serialize(&p->RemainingTime, serializer);
        FP.Serialize(&p->TickTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UnitBehavior_SpawnOnDeath {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefCardSettings Card;
    [FieldOffset(8)]
    public FPVector2 Offset;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 149;
        hash = hash * 31 + Card.GetHashCode();
        hash = hash * 31 + Offset.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UnitBehavior_SpawnOnDeath*)ptr;
        Quantum.AssetRefCardSettings.Serialize(&p->Card, serializer);
        FPVector2.Serialize(&p->Offset, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UnitBehavior_Spawner {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefCardSettings Card;
    [FieldOffset(24)]
    public FPVector2 Offset;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public FP RemainingSpawnTime;
    [FieldOffset(16)]
    public FP SpawnTime;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 151;
        hash = hash * 31 + Card.GetHashCode();
        hash = hash * 31 + Offset.GetHashCode();
        hash = hash * 31 + RemainingSpawnTime.GetHashCode();
        hash = hash * 31 + SpawnTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UnitBehavior_Spawner*)ptr;
        Quantum.AssetRefCardSettings.Serialize(&p->Card, serializer);
        FP.Serialize(&p->RemainingSpawnTime, serializer);
        FP.Serialize(&p->SpawnTime, serializer);
        FPVector2.Serialize(&p->Offset, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UnitStat {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP BaseValue;
    [FieldOffset(16)]
    public FP FinalValue;
    [FieldOffset(0)]
    public Byte Flags;
    [FieldOffset(24)]
    public FP MaxValue;
    [FieldOffset(4)]
    [FramePrinter.PtrQListAttribute(typeof(StatModifier))]
    private Quantum.Ptr StatModifiersPtr;
    public QListPtr<StatModifier> StatModifiers {
      get {
        return new QListPtr<StatModifier>(StatModifiersPtr);
      }
      set {
        StatModifiersPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 157;
        hash = hash * 31 + BaseValue.GetHashCode();
        hash = hash * 31 + FinalValue.GetHashCode();
        hash = hash * 31 + Flags.GetHashCode();
        hash = hash * 31 + MaxValue.GetHashCode();
        hash = hash * 31 + StatModifiersPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      StatModifiersPtr = default;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UnitStat*)ptr;
        serializer.Stream.Serialize(&p->Flags);
        QList.Serialize(p->StatModifiers, &p->StatModifiersPtr, serializer, StaticDelegates.SerializeStatModifier);
        FP.Serialize(&p->BaseValue, serializer);
        FP.Serialize(&p->FinalValue, serializer);
        FP.Serialize(&p->MaxValue, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WeaponBehavior_Projectile {
    public const Int32 SIZE = 56;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public ProjectileBehavior Behavior;
    [FieldOffset(0)]
    public AssetRefEntityPrototype Prototype;
    [FieldOffset(8)]
    public FP Speed;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 163;
        hash = hash * 31 + Behavior.GetHashCode();
        hash = hash * 31 + Prototype.GetHashCode();
        hash = hash * 31 + Speed.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponBehavior_Projectile*)ptr;
        AssetRefEntityPrototype.Serialize(&p->Prototype, serializer);
        FP.Serialize(&p->Speed, serializer);
        Quantum.ProjectileBehavior.Serialize(&p->Behavior, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WeaponBehavior_SingleTarget {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Damage;
    [FieldOffset(8)]
    public FP DamagePerLevelPercent;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 167;
        hash = hash * 31 + Damage.GetHashCode();
        hash = hash * 31 + DamagePerLevelPercent.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponBehavior_SingleTarget*)ptr;
        FP.Serialize(&p->Damage, serializer);
        FP.Serialize(&p->DamagePerLevelPercent, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 568;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(40)]
    public FP DeltaTime;
    [FieldOffset(104)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(24)]
    public AssetRefMap Map;
    [FieldOffset(48)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(272)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(56)]
    public PhysicsEngineState PhysicsState2D;
    [FieldOffset(72)]
    public PhysicsEngineState PhysicsState3D;
    [FieldOffset(32)]
    public BitSet6 PlayerLastConnectionState;
    [FieldOffset(88)]
    public RNGSession RngSession;
    [FieldOffset(144)]
    public BitSet1024 Systems;
    [FieldOffset(0)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[24];
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 4, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 173;
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PhysicsState2D.GetHashCode();
        hash = hash * 31 + PhysicsState3D.GetHashCode();
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        FixedArray.Serialize(p->input, serializer, StaticDelegates.SerializeInput);
        AssetRefMap.Serialize(&p->Map, serializer);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState2D, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState3D, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct BuffBehavior {
    public const Int32 SIZE = 48;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BuffBehavior.DURATION)]
    private BuffBehavior_Duration _Duration;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BuffBehavior.HEALTHOVERTIME)]
    private BuffBehavior_HealthOverTime _HealthOverTime;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BuffBehavior.STATS)]
    private BuffBehavior_Stats _Stats;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 DURATION = 1;
    public const Int32 HEALTHOVERTIME = 2;
    public const Int32 STATS = 3;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public BuffBehavior_Duration* Duration {
      get {
        fixed (BuffBehavior_Duration* p = &_Duration) {
          if (_field_used_ != DURATION) {
            Native.Utils.Clear(p, 24);
            _field_used_ = DURATION;
          }
          return p;
        }
      }
    }
    public BuffBehavior_HealthOverTime* HealthOverTime {
      get {
        fixed (BuffBehavior_HealthOverTime* p = &_HealthOverTime) {
          if (_field_used_ != HEALTHOVERTIME) {
            Native.Utils.Clear(p, 40);
            _field_used_ = HEALTHOVERTIME;
          }
          return p;
        }
      }
    }
    public BuffBehavior_Stats* Stats {
      get {
        fixed (BuffBehavior_Stats* p = &_Stats) {
          if (_field_used_ != STATS) {
            Native.Utils.Clear(p, 32);
            _field_used_ = STATS;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 179;
        hash = hash * 31 + _Duration.GetHashCode();
        hash = hash * 31 + _HealthOverTime.GetHashCode();
        hash = hash * 31 + _Stats.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BuffBehavior*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == DURATION) {
          Quantum.BuffBehavior_Duration.Serialize(&p->_Duration, serializer);
        }
        if (p->_field_used_ == HEALTHOVERTIME) {
          Quantum.BuffBehavior_HealthOverTime.Serialize(&p->_HealthOverTime, serializer);
        }
        if (p->_field_used_ == STATS) {
          Quantum.BuffBehavior_Stats.Serialize(&p->_Stats, serializer);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct EffectAreaBehavior {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.EffectAreaBehavior.BUFF)]
    private EffectAreaBehavior_Buff _Buff;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.EffectAreaBehavior.DAMAGE)]
    private EffectAreaBehavior_Damage _Damage;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 DAMAGE = 1;
    public const Int32 BUFF = 2;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public EffectAreaBehavior_Buff* Buff {
      get {
        fixed (EffectAreaBehavior_Buff* p = &_Buff) {
          if (_field_used_ != BUFF) {
            Native.Utils.Clear(p, 8);
            _field_used_ = BUFF;
          }
          return p;
        }
      }
    }
    public EffectAreaBehavior_Damage* Damage {
      get {
        fixed (EffectAreaBehavior_Damage* p = &_Damage) {
          if (_field_used_ != DAMAGE) {
            Native.Utils.Clear(p, 16);
            _field_used_ = DAMAGE;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 181;
        hash = hash * 31 + _Buff.GetHashCode();
        hash = hash * 31 + _Damage.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (EffectAreaBehavior*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == BUFF) {
          Quantum.EffectAreaBehavior_Buff.Serialize(&p->_Buff, serializer);
        }
        if (p->_field_used_ == DAMAGE) {
          Quantum.EffectAreaBehavior_Damage.Serialize(&p->_Damage, serializer);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct ProjectileBehavior {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.ProjectileBehavior.AOE)]
    private ProjectileBehavior_AoE _AoE;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.ProjectileBehavior.SINGLETARGET)]
    private ProjectileBehavior_SingleTarget _SingleTarget;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 SINGLETARGET = 1;
    public const Int32 AOE = 2;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public ProjectileBehavior_AoE* AoE {
      get {
        fixed (ProjectileBehavior_AoE* p = &_AoE) {
          if (_field_used_ != AOE) {
            Native.Utils.Clear(p, 32);
            _field_used_ = AOE;
          }
          return p;
        }
      }
    }
    public ProjectileBehavior_SingleTarget* SingleTarget {
      get {
        fixed (ProjectileBehavior_SingleTarget* p = &_SingleTarget) {
          if (_field_used_ != SINGLETARGET) {
            Native.Utils.Clear(p, 16);
            _field_used_ = SINGLETARGET;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 191;
        hash = hash * 31 + _AoE.GetHashCode();
        hash = hash * 31 + _SingleTarget.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ProjectileBehavior*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == AOE) {
          Quantum.ProjectileBehavior_AoE.Serialize(&p->_AoE, serializer);
        }
        if (p->_field_used_ == SINGLETARGET) {
          Quantum.ProjectileBehavior_SingleTarget.Serialize(&p->_SingleTarget, serializer);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct UnitBehavior {
    public const Int32 SIZE = 48;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.UnitBehavior.LIFETIME)]
    private UnitBehavior_Lifetime _Lifetime;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.UnitBehavior.SPAWNONDEATH)]
    private UnitBehavior_SpawnOnDeath _SpawnOnDeath;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.UnitBehavior.SPAWNER)]
    private UnitBehavior_Spawner _Spawner;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 SPAWNER = 1;
    public const Int32 LIFETIME = 2;
    public const Int32 SPAWNONDEATH = 3;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public UnitBehavior_Lifetime* Lifetime {
      get {
        fixed (UnitBehavior_Lifetime* p = &_Lifetime) {
          if (_field_used_ != LIFETIME) {
            Native.Utils.Clear(p, 32);
            _field_used_ = LIFETIME;
          }
          return p;
        }
      }
    }
    public UnitBehavior_SpawnOnDeath* SpawnOnDeath {
      get {
        fixed (UnitBehavior_SpawnOnDeath* p = &_SpawnOnDeath) {
          if (_field_used_ != SPAWNONDEATH) {
            Native.Utils.Clear(p, 24);
            _field_used_ = SPAWNONDEATH;
          }
          return p;
        }
      }
    }
    public UnitBehavior_Spawner* Spawner {
      get {
        fixed (UnitBehavior_Spawner* p = &_Spawner) {
          if (_field_used_ != SPAWNER) {
            Native.Utils.Clear(p, 40);
            _field_used_ = SPAWNER;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 193;
        hash = hash * 31 + _Lifetime.GetHashCode();
        hash = hash * 31 + _SpawnOnDeath.GetHashCode();
        hash = hash * 31 + _Spawner.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UnitBehavior*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == LIFETIME) {
          Quantum.UnitBehavior_Lifetime.Serialize(&p->_Lifetime, serializer);
        }
        if (p->_field_used_ == SPAWNONDEATH) {
          Quantum.UnitBehavior_SpawnOnDeath.Serialize(&p->_SpawnOnDeath, serializer);
        }
        if (p->_field_used_ == SPAWNER) {
          Quantum.UnitBehavior_Spawner.Serialize(&p->_Spawner, serializer);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct WeaponBehavior {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.WeaponBehavior.PROJECTILE)]
    private WeaponBehavior_Projectile _Projectile;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.WeaponBehavior.SINGLETARGET)]
    private WeaponBehavior_SingleTarget _SingleTarget;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 SINGLETARGET = 1;
    public const Int32 PROJECTILE = 2;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public WeaponBehavior_Projectile* Projectile {
      get {
        fixed (WeaponBehavior_Projectile* p = &_Projectile) {
          if (_field_used_ != PROJECTILE) {
            Native.Utils.Clear(p, 56);
            _field_used_ = PROJECTILE;
          }
          return p;
        }
      }
    }
    public WeaponBehavior_SingleTarget* SingleTarget {
      get {
        fixed (WeaponBehavior_SingleTarget* p = &_SingleTarget) {
          if (_field_used_ != SINGLETARGET) {
            Native.Utils.Clear(p, 16);
            _field_used_ = SINGLETARGET;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 197;
        hash = hash * 31 + _Projectile.GetHashCode();
        hash = hash * 31 + _SingleTarget.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponBehavior*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == PROJECTILE) {
          Quantum.WeaponBehavior_Projectile.Serialize(&p->_Projectile, serializer);
        }
        if (p->_field_used_ == SINGLETARGET) {
          Quantum.WeaponBehavior_SingleTarget.Serialize(&p->_SingleTarget, serializer);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Buff : Quantum.IComponent {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    [FramePrinter.PtrQListAttribute(typeof(BuffBehavior))]
    private Quantum.Ptr BehaviorsPtr;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Byte Flags;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public Int64 ID;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public EntityRef Owner;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public EntityRef Target;
    public QListPtr<BuffBehavior> Behaviors {
      get {
        return new QListPtr<BuffBehavior>(BehaviorsPtr);
      }
      set {
        BehaviorsPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 199;
        hash = hash * 31 + BehaviorsPtr.GetHashCode();
        hash = hash * 31 + Flags.GetHashCode();
        hash = hash * 31 + ID.GetHashCode();
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      BehaviorsPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Buff*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Buff*)ptr;
        serializer.Stream.Serialize(&p->Flags);
        QList.Serialize(p->Behaviors, &p->BehaviorsPtr, serializer, StaticDelegates.SerializeBuffBehavior);
        EntityRef.Serialize(&p->Owner, serializer);
        EntityRef.Serialize(&p->Target, serializer);
        serializer.Stream.Serialize(&p->ID);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Buffs : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    [FramePrinter.PtrQListAttribute(typeof(EntityRef))]
    private Quantum.Ptr BuffListPtr;
    public QListPtr<EntityRef> BuffList {
      get {
        return new QListPtr<EntityRef>(BuffListPtr);
      }
      set {
        BuffListPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 211;
        hash = hash * 31 + BuffListPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      BuffListPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Buffs*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Buffs*)ptr;
        QList.Serialize(p->BuffList, &p->BuffListPtr, serializer, StaticDelegates.SerializeEntityRef);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [ExcludeFromPrototype()]
  public unsafe partial struct CardManager : Quantum.IComponent {
    public const Int32 SIZE = 48;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    [FramePrinter.PtrQListAttribute(typeof(CardInfo))]
    private Quantum.Ptr AvailableCardsPtr;
    [FieldOffset(8)]
    [FramePrinter.PtrQListAttribute(typeof(CardInfo))]
    private Quantum.Ptr CardQueuePtr;
    [FieldOffset(16)]
    public FP CurrentEnergy;
    [FieldOffset(0)]
    public Byte EmptySlots;
    [FieldOffset(24)]
    public FP EnergyFillRate;
    [FieldOffset(32)]
    public FP MaxEnergy;
    [FieldOffset(40)]
    public FP NextFillTime;
    [FieldOffset(1)]
    public Byte QueueHeadIndex;
    [FieldOffset(2)]
    public Byte QueueTailIndex;
    public QListPtr<CardInfo> AvailableCards {
      get {
        return new QListPtr<CardInfo>(AvailableCardsPtr);
      }
      set {
        AvailableCardsPtr = value.Ptr;
      }
    }
    public QListPtr<CardInfo> CardQueue {
      get {
        return new QListPtr<CardInfo>(CardQueuePtr);
      }
      set {
        CardQueuePtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 223;
        hash = hash * 31 + AvailableCardsPtr.GetHashCode();
        hash = hash * 31 + CardQueuePtr.GetHashCode();
        hash = hash * 31 + CurrentEnergy.GetHashCode();
        hash = hash * 31 + EmptySlots.GetHashCode();
        hash = hash * 31 + EnergyFillRate.GetHashCode();
        hash = hash * 31 + MaxEnergy.GetHashCode();
        hash = hash * 31 + NextFillTime.GetHashCode();
        hash = hash * 31 + QueueHeadIndex.GetHashCode();
        hash = hash * 31 + QueueTailIndex.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      AvailableCardsPtr = default;
      CardQueuePtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (CardManager*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CardManager*)ptr;
        serializer.Stream.Serialize(&p->EmptySlots);
        serializer.Stream.Serialize(&p->QueueHeadIndex);
        serializer.Stream.Serialize(&p->QueueTailIndex);
        QList.Serialize(p->AvailableCards, &p->AvailableCardsPtr, serializer, StaticDelegates.SerializeCardInfo);
        QList.Serialize(p->CardQueue, &p->CardQueuePtr, serializer, StaticDelegates.SerializeCardInfo);
        FP.Serialize(&p->CurrentEnergy, serializer);
        FP.Serialize(&p->EnergyFillRate, serializer);
        FP.Serialize(&p->MaxEnergy, serializer);
        FP.Serialize(&p->NextFillTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct EffectArea : Quantum.IComponent {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    [FramePrinter.PtrQListAttribute(typeof(EffectAreaBehavior))]
    private Quantum.Ptr BehaviorsPtr;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Byte Level;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public PlayerRef Owner;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public FP Radius;
    [FieldOffset(2)]
    [ExcludeFromPrototype()]
    public EEffectAreaState State;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public FP StateTime;
    [FieldOffset(3)]
    [ExcludeFromPrototype()]
    public EEffectAreaTarget TargetType;
    [FieldOffset(1)]
    [ExcludeFromPrototype()]
    public Byte TickCount;
    [FieldOffset(32)]
    [ExcludeFromPrototype()]
    public FP TickTime;
    public QListPtr<EffectAreaBehavior> Behaviors {
      get {
        return new QListPtr<EffectAreaBehavior>(BehaviorsPtr);
      }
      set {
        BehaviorsPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 227;
        hash = hash * 31 + BehaviorsPtr.GetHashCode();
        hash = hash * 31 + Level.GetHashCode();
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + Radius.GetHashCode();
        hash = hash * 31 + (Byte)State;
        hash = hash * 31 + StateTime.GetHashCode();
        hash = hash * 31 + (Byte)TargetType;
        hash = hash * 31 + TickCount.GetHashCode();
        hash = hash * 31 + TickTime.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      BehaviorsPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (EffectArea*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (EffectArea*)ptr;
        serializer.Stream.Serialize(&p->Level);
        serializer.Stream.Serialize(&p->TickCount);
        serializer.Stream.Serialize((Byte*)&p->State);
        serializer.Stream.Serialize((Byte*)&p->TargetType);
        PlayerRef.Serialize(&p->Owner, serializer);
        QList.Serialize(p->Behaviors, &p->BehaviorsPtr, serializer, StaticDelegates.SerializeEffectAreaBehavior);
        FP.Serialize(&p->Radius, serializer);
        FP.Serialize(&p->StateTime, serializer);
        FP.Serialize(&p->TickTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Gameplay : Quantum.IComponentSingleton {
    public const Int32 SIZE = 56;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(40)]
    public PlayerArea AlphaArea;
    [FieldOffset(16)]
    public EntityRef AlphaCastle;
    [FieldOffset(0)]
    [HideInInspector()]
    public Byte AlphaScore;
    [FieldOffset(8)]
    [FreeOnComponentRemoved()]
    [FramePrinter.PtrQListAttribute(typeof(EntityRef))]
    private Quantum.Ptr AlphaTowersPtr;
    [FieldOffset(48)]
    public PlayerArea BetaArea;
    [FieldOffset(24)]
    public EntityRef BetaCastle;
    [FieldOffset(1)]
    [HideInInspector()]
    public Byte BetaScore;
    [FieldOffset(12)]
    [FreeOnComponentRemoved()]
    [FramePrinter.PtrQListAttribute(typeof(EntityRef))]
    private Quantum.Ptr BetaTowersPtr;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public EGameplayState State;
    [FieldOffset(32)]
    [ExcludeFromPrototype()]
    public FP StateTime;
    public QListPtr<EntityRef> AlphaTowers {
      get {
        return new QListPtr<EntityRef>(AlphaTowersPtr);
      }
      set {
        AlphaTowersPtr = value.Ptr;
      }
    }
    public QListPtr<EntityRef> BetaTowers {
      get {
        return new QListPtr<EntityRef>(BetaTowersPtr);
      }
      set {
        BetaTowersPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 229;
        hash = hash * 31 + AlphaArea.GetHashCode();
        hash = hash * 31 + AlphaCastle.GetHashCode();
        hash = hash * 31 + AlphaScore.GetHashCode();
        hash = hash * 31 + AlphaTowersPtr.GetHashCode();
        hash = hash * 31 + BetaArea.GetHashCode();
        hash = hash * 31 + BetaCastle.GetHashCode();
        hash = hash * 31 + BetaScore.GetHashCode();
        hash = hash * 31 + BetaTowersPtr.GetHashCode();
        hash = hash * 31 + (Int32)State;
        hash = hash * 31 + StateTime.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      AlphaArea.ClearPointers(f, entity);
      if (AlphaTowersPtr != default) f.FreeList(AlphaTowers);
      AlphaTowersPtr = default;
      BetaArea.ClearPointers(f, entity);
      if (BetaTowersPtr != default) f.FreeList(BetaTowers);
      BetaTowersPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Gameplay*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Gameplay*)ptr;
        serializer.Stream.Serialize(&p->AlphaScore);
        serializer.Stream.Serialize(&p->BetaScore);
        serializer.Stream.Serialize((Int32*)&p->State);
        QList.Serialize(p->AlphaTowers, &p->AlphaTowersPtr, serializer, StaticDelegates.SerializeEntityRef);
        QList.Serialize(p->BetaTowers, &p->BetaTowersPtr, serializer, StaticDelegates.SerializeEntityRef);
        EntityRef.Serialize(&p->AlphaCastle, serializer);
        EntityRef.Serialize(&p->BetaCastle, serializer);
        FP.Serialize(&p->StateTime, serializer);
        Quantum.PlayerArea.Serialize(&p->AlphaArea, serializer);
        Quantum.PlayerArea.Serialize(&p->BetaArea, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Health : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public FP CurrentHealth;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Byte Flags;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public FP MaxHealth;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 233;
        hash = hash * 31 + CurrentHealth.GetHashCode();
        hash = hash * 31 + Flags.GetHashCode();
        hash = hash * 31 + MaxHealth.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Health*)ptr;
        serializer.Stream.Serialize(&p->Flags);
        FP.Serialize(&p->CurrentHealth, serializer);
        FP.Serialize(&p->MaxHealth, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Movement : Quantum.IComponent {
    public const Int32 SIZE = 72;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public FP BusyTime;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public FPVector2 DesiredPosition;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Byte Flags;
    [FieldOffset(40)]
    [ExcludeFromPrototype()]
    public FPVector2 LookPosition;
    [FieldOffset(56)]
    [ExcludeFromPrototype()]
    public FPVector2 MovePosition;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public FP MovementSpeed;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 239;
        hash = hash * 31 + BusyTime.GetHashCode();
        hash = hash * 31 + DesiredPosition.GetHashCode();
        hash = hash * 31 + Flags.GetHashCode();
        hash = hash * 31 + LookPosition.GetHashCode();
        hash = hash * 31 + MovePosition.GetHashCode();
        hash = hash * 31 + MovementSpeed.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Movement*)ptr;
        serializer.Stream.Serialize(&p->Flags);
        FP.Serialize(&p->BusyTime, serializer);
        FP.Serialize(&p->MovementSpeed, serializer);
        FPVector2.Serialize(&p->DesiredPosition, serializer);
        FPVector2.Serialize(&p->LookPosition, serializer);
        FPVector2.Serialize(&p->MovePosition, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [ExcludeFromPrototype()]
  public unsafe partial struct Player : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public PlayerRef PlayerRef;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 241;
        hash = hash * 31 + PlayerRef.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Player*)ptr;
        PlayerRef.Serialize(&p->PlayerRef, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Projectile : Quantum.IComponent {
    public const Int32 SIZE = 88;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(48)]
    [ExcludeFromPrototype()]
    public ProjectileBehavior Behavior;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Byte Level;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public PlayerRef Owner;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public EntityRef SourceEntity;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public FP Speed;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public EntityRef TargetEntity;
    [FieldOffset(32)]
    [ExcludeFromPrototype()]
    public FPVector2 TargetPosition;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 251;
        hash = hash * 31 + Behavior.GetHashCode();
        hash = hash * 31 + Level.GetHashCode();
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + SourceEntity.GetHashCode();
        hash = hash * 31 + Speed.GetHashCode();
        hash = hash * 31 + TargetEntity.GetHashCode();
        hash = hash * 31 + TargetPosition.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Projectile*)ptr;
        serializer.Stream.Serialize(&p->Level);
        PlayerRef.Serialize(&p->Owner, serializer);
        EntityRef.Serialize(&p->SourceEntity, serializer);
        EntityRef.Serialize(&p->TargetEntity, serializer);
        FP.Serialize(&p->Speed, serializer);
        FPVector2.Serialize(&p->TargetPosition, serializer);
        Quantum.ProjectileBehavior.Serialize(&p->Behavior, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Target : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public PlayerRef OwnerPlayerRef;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public FP Size;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public ETargetType Type;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 257;
        hash = hash * 31 + OwnerPlayerRef.GetHashCode();
        hash = hash * 31 + Size.GetHashCode();
        hash = hash * 31 + (Byte)Type;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Target*)ptr;
        serializer.Stream.Serialize((Byte*)&p->Type);
        PlayerRef.Serialize(&p->OwnerPlayerRef, serializer);
        FP.Serialize(&p->Size, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Unit : Quantum.IComponent {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public FP ActivationDelay;
    [FieldOffset(12)]
    [ExcludeFromPrototype()]
    [FramePrinter.PtrQListAttribute(typeof(UnitBehavior))]
    private Quantum.Ptr BehaviorsPtr;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public QBoolean DestroyOnDeath;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Byte Level;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public PlayerRef Owner;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public AssetRefCardSettings Settings;
    public QListPtr<UnitBehavior> Behaviors {
      get {
        return new QListPtr<UnitBehavior>(BehaviorsPtr);
      }
      set {
        BehaviorsPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 263;
        hash = hash * 31 + ActivationDelay.GetHashCode();
        hash = hash * 31 + BehaviorsPtr.GetHashCode();
        hash = hash * 31 + DestroyOnDeath.GetHashCode();
        hash = hash * 31 + Level.GetHashCode();
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + Settings.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      BehaviorsPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Unit*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Unit*)ptr;
        serializer.Stream.Serialize(&p->Level);
        PlayerRef.Serialize(&p->Owner, serializer);
        QBoolean.Serialize(&p->DestroyOnDeath, serializer);
        QList.Serialize(p->Behaviors, &p->BehaviorsPtr, serializer, StaticDelegates.SerializeUnitBehavior);
        Quantum.AssetRefCardSettings.Serialize(&p->Settings, serializer);
        FP.Serialize(&p->ActivationDelay, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UnitAI : Quantum.IComponent {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public QBoolean Enabled;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public PlayerRef Owner;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public EntityRef Target;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public ETargetTypeFlags TargetingFlags;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public FP TargetingRange;
    [FieldOffset(32)]
    [ExcludeFromPrototype()]
    public FP TargetingUpdateTimer;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 269;
        hash = hash * 31 + Enabled.GetHashCode();
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        hash = hash * 31 + (Int32)TargetingFlags;
        hash = hash * 31 + TargetingRange.GetHashCode();
        hash = hash * 31 + TargetingUpdateTimer.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UnitAI*)ptr;
        serializer.Stream.Serialize((Int32*)&p->TargetingFlags);
        PlayerRef.Serialize(&p->Owner, serializer);
        QBoolean.Serialize(&p->Enabled, serializer);
        EntityRef.Serialize(&p->Target, serializer);
        FP.Serialize(&p->TargetingRange, serializer);
        FP.Serialize(&p->TargetingUpdateTimer, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UnitStats : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Byte Flags;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    [FramePrinter.PtrQDictionaryAttribute(typeof(Int32), typeof(UnitStat))]
    private Quantum.Ptr StatDictionaryPtr;
    public QDictionaryPtr<Int32, UnitStat> StatDictionary {
      get {
        return new QDictionaryPtr<Int32, UnitStat>(StatDictionaryPtr);
      }
      set {
        StatDictionaryPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 271;
        hash = hash * 31 + Flags.GetHashCode();
        hash = hash * 31 + StatDictionaryPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      StatDictionaryPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (UnitStats*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UnitStats*)ptr;
        serializer.Stream.Serialize(&p->Flags);
        QDictionary.Serialize(p->StatDictionary, &p->StatDictionaryPtr, serializer, StaticDelegates.SerializeInt32, StaticDelegates.SerializeUnitStat);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Weapon : Quantum.IComponent {
    public const Int32 SIZE = 144;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(32)]
    [ExcludeFromPrototype()]
    public FP AttackRange;
    [FieldOffset(40)]
    [ExcludeFromPrototype()]
    public FP AttackSpeed;
    [FieldOffset(80)]
    [ExcludeFromPrototype()]
    public WeaponBehavior Behavior;
    [FieldOffset(48)]
    [ExcludeFromPrototype()]
    public FP Damage;
    [FieldOffset(12)]
    [ExcludeFromPrototype()]
    public QBoolean Enabled;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Byte Level;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public PlayerRef Owner;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public EntityRef PendingTarget;
    [FieldOffset(56)]
    [ExcludeFromPrototype()]
    public FP StartAttackDelay;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public EWeaponState State;
    [FieldOffset(64)]
    [ExcludeFromPrototype()]
    public FP StateTimer;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public EntityRef Target;
    [FieldOffset(72)]
    [ExcludeFromPrototype()]
    public FP TargetSize;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 277;
        hash = hash * 31 + AttackRange.GetHashCode();
        hash = hash * 31 + AttackSpeed.GetHashCode();
        hash = hash * 31 + Behavior.GetHashCode();
        hash = hash * 31 + Damage.GetHashCode();
        hash = hash * 31 + Enabled.GetHashCode();
        hash = hash * 31 + Level.GetHashCode();
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + PendingTarget.GetHashCode();
        hash = hash * 31 + StartAttackDelay.GetHashCode();
        hash = hash * 31 + (Int32)State;
        hash = hash * 31 + StateTimer.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        hash = hash * 31 + TargetSize.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Weapon*)ptr;
        serializer.Stream.Serialize(&p->Level);
        serializer.Stream.Serialize((Int32*)&p->State);
        PlayerRef.Serialize(&p->Owner, serializer);
        QBoolean.Serialize(&p->Enabled, serializer);
        EntityRef.Serialize(&p->PendingTarget, serializer);
        EntityRef.Serialize(&p->Target, serializer);
        FP.Serialize(&p->AttackRange, serializer);
        FP.Serialize(&p->AttackSpeed, serializer);
        FP.Serialize(&p->Damage, serializer);
        FP.Serialize(&p->StartAttackDelay, serializer);
        FP.Serialize(&p->StateTimer, serializer);
        FP.Serialize(&p->TargetSize, serializer);
        Quantum.WeaponBehavior.Serialize(&p->Behavior, serializer);
    }
  }
  public unsafe partial class Frame {
    private ISignalOnDeath[] _ISignalOnDeathSystems;
    private ISignalStatsUpdated[] _ISignalStatsUpdatedSystems;
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    static partial void InitStaticGen() {
      ComponentTypeId.Setup(() => {
        ComponentTypeId.Add<Quantum.Buff>(Quantum.Buff.Serialize, null, Quantum.Buff.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Buffs>(Quantum.Buffs.Serialize, null, Quantum.Buffs.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.CardManager>(Quantum.CardManager.Serialize, null, Quantum.CardManager.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.EffectArea>(Quantum.EffectArea.Serialize, null, Quantum.EffectArea.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Gameplay>(Quantum.Gameplay.Serialize, null, Quantum.Gameplay.OnRemoved, ComponentFlags.Singleton);
        ComponentTypeId.Add<Quantum.Health>(Quantum.Health.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Movement>(Quantum.Movement.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Player>(Quantum.Player.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Projectile>(Quantum.Projectile.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Target>(Quantum.Target.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Unit>(Quantum.Unit.Serialize, null, Quantum.Unit.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.UnitAI>(Quantum.UnitAI.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.UnitStats>(Quantum.UnitStats.Serialize, null, Quantum.UnitStats.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Weapon>(Quantum.Weapon.Serialize, null, null, ComponentFlags.None);
      });
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities);
      _ISignalOnDeathSystems = BuildSignalsArray<ISignalOnDeath>();
      _ISignalStatsUpdatedSystems = BuildSignalsArray<ISignalStatsUpdated>();
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.Buff>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Buff>();
      BuildSignalsArrayOnComponentAdded<Quantum.Buffs>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Buffs>();
      BuildSignalsArrayOnComponentAdded<Quantum.CardManager>();
      BuildSignalsArrayOnComponentRemoved<Quantum.CardManager>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.EffectArea>();
      BuildSignalsArrayOnComponentRemoved<Quantum.EffectArea>();
      BuildSignalsArrayOnComponentAdded<Quantum.Gameplay>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Gameplay>();
      BuildSignalsArrayOnComponentAdded<Quantum.Health>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Health>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.Movement>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Movement>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.Player>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Player>();
      BuildSignalsArrayOnComponentAdded<Quantum.Projectile>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Projectile>();
      BuildSignalsArrayOnComponentAdded<Quantum.Target>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Target>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.Unit>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Unit>();
      BuildSignalsArrayOnComponentAdded<Quantum.UnitAI>();
      BuildSignalsArrayOnComponentRemoved<Quantum.UnitAI>();
      BuildSignalsArrayOnComponentAdded<Quantum.UnitStats>();
      BuildSignalsArrayOnComponentRemoved<Quantum.UnitStats>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
      BuildSignalsArrayOnComponentAdded<Quantum.Weapon>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Weapon>();
    }
    public void SetPlayerInput(Int32 player, Input input) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
    }
    public Input* GetPlayerInput(Int32 player) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    public unsafe partial struct FrameSignals {
      public void OnDeath(EntityRef entity, EntityRef killer) {
        var array = _f._ISignalOnDeathSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnDeath(_f, entity, killer);
          }
        }
      }
      public void StatsUpdated(EntityRef entity, Int64 changedMask) {
        var array = _f._ISignalStatsUpdatedSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.StatsUpdated(_f, entity, changedMask);
          }
        }
      }
    }
    public unsafe partial struct FrameEvents {
      public const Int32 EVENT_TYPE_COUNT = 9;
      public static Int32 GetParentEventID(Int32 eventID) {
        switch (eventID) {
          default: return -1;
        }
      }
      public static System.Type GetEventType(Int32 eventID) {
        switch (eventID) {
          case EventCardsChanged.ID: return typeof(EventCardsChanged);
          case EventCardSpawned.ID: return typeof(EventCardSpawned);
          case EventGameplayStateChanged.ID: return typeof(EventGameplayStateChanged);
          case EventScoreGained.ID: return typeof(EventScoreGained);
          case EventGameplayResult.ID: return typeof(EventGameplayResult);
          case EventUnitDestroyed.ID: return typeof(EventUnitDestroyed);
          case EventDeath.ID: return typeof(EventDeath);
          case EventOnHealthChanged.ID: return typeof(EventOnHealthChanged);
          case EventAttackStart.ID: return typeof(EventAttackStart);
          default: throw new System.ArgumentOutOfRangeException("eventID");
        }
      }
      public EventCardsChanged CardsChanged(EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventCardsChanged>(EventCardsChanged.ID);
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventCardSpawned CardSpawned(PlayerRef Owner, AssetRefCardSettings assetRefCardSettings) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventCardSpawned>(EventCardSpawned.ID);
        ev.Owner = Owner;
        ev.assetRefCardSettings = assetRefCardSettings;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGameplayStateChanged GameplayStateChanged(EGameplayState State) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventGameplayStateChanged>(EventGameplayStateChanged.ID);
        ev.State = State;
        _f.AddEvent(ev);
        return ev;
      }
      public EventScoreGained ScoreGained(PlayerRef PlayerRef, Byte TotalScore, Byte Change) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventScoreGained>(EventScoreGained.ID);
        ev.PlayerRef = PlayerRef;
        ev.TotalScore = TotalScore;
        ev.Change = Change;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGameplayResult GameplayResult(Int32 Winner) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventGameplayResult>(EventGameplayResult.ID);
        ev.Winner = Winner;
        _f.AddEvent(ev);
        return ev;
      }
      public EventUnitDestroyed UnitDestroyed(PlayerRef Owner, EntityRef UnitEntity, EntityRef killer) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventUnitDestroyed>(EventUnitDestroyed.ID);
        ev.Owner = Owner;
        ev.UnitEntity = UnitEntity;
        ev.killer = killer;
        _f.AddEvent(ev);
        return ev;
      }
      public EventDeath Death(EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventDeath>(EventDeath.ID);
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnHealthChanged OnHealthChanged(HealthData Data) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnHealthChanged>(EventOnHealthChanged.ID);
        ev.Data = Data;
        _f.AddEvent(ev);
        return ev;
      }
      public EventAttackStart AttackStart(EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventAttackStart>(EventAttackStart.ID);
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
    }
    public unsafe partial struct FrameAssets {
      public CardSettings CardSettings(AssetRefCardSettings assetRef) {
         return _f.FindAsset<CardSettings>(assetRef.Id);
      }
      public GameplaySettings GameplaySettings(AssetRefGameplaySettings assetRef) {
         return _f.FindAsset<GameplaySettings>(assetRef.Id);
      }
    }
  }
  public unsafe interface ISignalOnDeath : ISignal {
    void OnDeath(Frame f, EntityRef entity, EntityRef killer);
  }
  public unsafe interface ISignalStatsUpdated : ISignal {
    void StatsUpdated(Frame f, EntityRef entity, Int64 changedMask);
  }
  public unsafe partial class EventCardsChanged : EventBase {
    public new const Int32 ID = 0;
    public EntityRef Entity;
    protected EventCardsChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventCardsChanged() : 
        base(0, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 37;
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventCardSpawned : EventBase {
    public new const Int32 ID = 1;
    public PlayerRef Owner;
    public AssetRefCardSettings assetRefCardSettings;
    protected EventCardSpawned(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventCardSpawned() : 
        base(1, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + assetRefCardSettings.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGameplayStateChanged : EventBase {
    public new const Int32 ID = 2;
    public EGameplayState State;
    protected EventGameplayStateChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGameplayStateChanged() : 
        base(2, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + State.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventScoreGained : EventBase {
    public new const Int32 ID = 3;
    public PlayerRef PlayerRef;
    public Byte TotalScore;
    public Byte Change;
    protected EventScoreGained(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventScoreGained() : 
        base(3, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + TotalScore.GetHashCode();
        hash = hash * 31 + Change.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGameplayResult : EventBase {
    public new const Int32 ID = 4;
    public Int32 Winner;
    protected EventGameplayResult(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGameplayResult() : 
        base(4, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + Winner.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventUnitDestroyed : EventBase {
    public new const Int32 ID = 5;
    public PlayerRef Owner;
    public EntityRef UnitEntity;
    public EntityRef killer;
    protected EventUnitDestroyed(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventUnitDestroyed() : 
        base(5, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + UnitEntity.GetHashCode();
        hash = hash * 31 + killer.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventDeath : EventBase {
    public new const Int32 ID = 6;
    public EntityRef Entity;
    protected EventDeath(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventDeath() : 
        base(6, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnHealthChanged : EventBase {
    public new const Int32 ID = 7;
    public HealthData Data;
    protected EventOnHealthChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnHealthChanged() : 
        base(7, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + Data.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventAttackStart : EventBase {
    public new const Int32 ID = 8;
    public EntityRef Entity;
    protected EventAttackStart(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventAttackStart() : 
        base(8, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 71;
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public static unsafe partial class BitStreamExtensions {
    public static void Serialize(this IBitStream stream, ref AssetRefCardSettings value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGameplaySettings value) {
      stream.Serialize(ref value.Id.Value);
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class CardSettings : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GameplaySettings : AssetObject {
  }
  public unsafe partial class ComponentPrototypeVisitor : Prototypes.ComponentPrototypeVisitorBase {
    public virtual void Visit(Prototypes.Buff_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Buffs_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.EffectArea_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Gameplay_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Health_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Movement_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Projectile_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Target_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Unit_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.UnitAI_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.UnitStats_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Weapon_Prototype prototype) {
      VisitFallback(prototype);
    }
  }
  public static unsafe partial class Constants {
  }
  public static unsafe partial class StaticDelegates {
    public static FrameSerializer.Delegate SerializeBuffBehavior;
    public static FrameSerializer.Delegate SerializeEntityRef;
    public static FrameSerializer.Delegate SerializeCardInfo;
    public static FrameSerializer.Delegate SerializeEffectAreaBehavior;
    public static FrameSerializer.Delegate SerializeBlockedArea;
    public static FrameSerializer.Delegate SerializeUnitBehavior;
    public static FrameSerializer.Delegate SerializeStatModifier;
    public static FrameSerializer.Delegate SerializeInt32;
    public static FrameSerializer.Delegate SerializeUnitStat;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitGen() {
      SerializeBuffBehavior = Quantum.BuffBehavior.Serialize;
      SerializeEntityRef = EntityRef.Serialize;
      SerializeCardInfo = Quantum.CardInfo.Serialize;
      SerializeEffectAreaBehavior = Quantum.EffectAreaBehavior.Serialize;
      SerializeBlockedArea = Quantum.BlockedArea.Serialize;
      SerializeUnitBehavior = Quantum.UnitBehavior.Serialize;
      SerializeStatModifier = Quantum.StatModifier.Serialize;
      SerializeInt32 = (v, s) => {{ s.Stream.Serialize((Int32*)v); }};
      SerializeUnitStat = Quantum.UnitStat.Serialize;
      SerializeInput = Quantum.Input.Serialize;
    }
  }
  public unsafe partial class TypeRegistry {
    partial void AddGenerated() {
      Register(typeof(AssetGuid), AssetGuid.SIZE);
      Register(typeof(Quantum.AssetRefCardSettings), Quantum.AssetRefCardSettings.SIZE);
      Register(typeof(AssetRefCharacterController2DConfig), AssetRefCharacterController2DConfig.SIZE);
      Register(typeof(AssetRefCharacterController3DConfig), AssetRefCharacterController3DConfig.SIZE);
      Register(typeof(AssetRefEntityPrototype), AssetRefEntityPrototype.SIZE);
      Register(typeof(AssetRefEntityView), AssetRefEntityView.SIZE);
      Register(typeof(Quantum.AssetRefGameplaySettings), Quantum.AssetRefGameplaySettings.SIZE);
      Register(typeof(AssetRefMap), AssetRefMap.SIZE);
      Register(typeof(AssetRefNavMesh), AssetRefNavMesh.SIZE);
      Register(typeof(AssetRefNavMeshAgentConfig), AssetRefNavMeshAgentConfig.SIZE);
      Register(typeof(AssetRefPhysicsMaterial), AssetRefPhysicsMaterial.SIZE);
      Register(typeof(AssetRefPolygonCollider), AssetRefPolygonCollider.SIZE);
      Register(typeof(AssetRefTerrainCollider), AssetRefTerrainCollider.SIZE);
      Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      Register(typeof(Quantum.BlockedArea), Quantum.BlockedArea.SIZE);
      Register(typeof(Quantum.Buff), Quantum.Buff.SIZE);
      Register(typeof(Quantum.BuffBehavior), Quantum.BuffBehavior.SIZE);
      Register(typeof(Quantum.BuffBehavior_Duration), Quantum.BuffBehavior_Duration.SIZE);
      Register(typeof(Quantum.BuffBehavior_HealthOverTime), Quantum.BuffBehavior_HealthOverTime.SIZE);
      Register(typeof(Quantum.BuffBehavior_Stats), Quantum.BuffBehavior_Stats.SIZE);
      Register(typeof(Quantum.Buffs), Quantum.Buffs.SIZE);
      Register(typeof(Button), Button.SIZE);
      Register(typeof(Quantum.CardInfo), Quantum.CardInfo.SIZE);
      Register(typeof(Quantum.CardManager), Quantum.CardManager.SIZE);
      Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      Register(typeof(Quantum.EEffectAreaState), 1);
      Register(typeof(Quantum.EEffectAreaTarget), 1);
      Register(typeof(Quantum.EGameplayState), 4);
      Register(typeof(Quantum.EHealthAction), 1);
      Register(typeof(Quantum.ERarity), 1);
      Register(typeof(Quantum.EStatType), 1);
      Register(typeof(Quantum.ETargetType), 1);
      Register(typeof(Quantum.ETargetTypeFlags), 4);
      Register(typeof(Quantum.EWeaponState), 4);
      Register(typeof(Quantum.EffectArea), Quantum.EffectArea.SIZE);
      Register(typeof(Quantum.EffectAreaBehavior), Quantum.EffectAreaBehavior.SIZE);
      Register(typeof(Quantum.EffectAreaBehavior_Buff), Quantum.EffectAreaBehavior_Buff.SIZE);
      Register(typeof(Quantum.EffectAreaBehavior_Damage), Quantum.EffectAreaBehavior_Damage.SIZE);
      Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      Register(typeof(EntityRef), EntityRef.SIZE);
      Register(typeof(FP), FP.SIZE);
      Register(typeof(FPBounds2), FPBounds2.SIZE);
      Register(typeof(FPBounds3), FPBounds3.SIZE);
      Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      Register(typeof(FPVector2), FPVector2.SIZE);
      Register(typeof(FPVector3), FPVector3.SIZE);
      Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      Register(typeof(Quantum.Gameplay), Quantum.Gameplay.SIZE);
      Register(typeof(Quantum.Health), Quantum.Health.SIZE);
      Register(typeof(Quantum.HealthData), Quantum.HealthData.SIZE);
      Register(typeof(HingeJoint), HingeJoint.SIZE);
      Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      Register(typeof(Hit), Hit.SIZE);
      Register(typeof(Hit3D), Hit3D.SIZE);
      Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      Register(typeof(Quantum.InputButtons), 4);
      Register(typeof(Joint), Joint.SIZE);
      Register(typeof(Joint3D), Joint3D.SIZE);
      Register(typeof(LayerMask), LayerMask.SIZE);
      Register(typeof(MapEntityId), MapEntityId.SIZE);
      Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      Register(typeof(Quantum.Movement), Quantum.Movement.SIZE);
      Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      Register(typeof(NullableFP), NullableFP.SIZE);
      Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      Register(typeof(PhysicsEngineState), PhysicsEngineState.SIZE);
      Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      Register(typeof(Quantum.Player), Quantum.Player.SIZE);
      Register(typeof(Quantum.PlayerArea), Quantum.PlayerArea.SIZE);
      Register(typeof(PlayerRef), PlayerRef.SIZE);
      Register(typeof(Quantum.Projectile), Quantum.Projectile.SIZE);
      Register(typeof(Quantum.ProjectileBehavior), Quantum.ProjectileBehavior.SIZE);
      Register(typeof(Quantum.ProjectileBehavior_AoE), Quantum.ProjectileBehavior_AoE.SIZE);
      Register(typeof(Quantum.ProjectileBehavior_SingleTarget), Quantum.ProjectileBehavior_SingleTarget.SIZE);
      Register(typeof(Ptr), Ptr.SIZE);
      Register(typeof(QBoolean), QBoolean.SIZE);
      Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      Register(typeof(RNGSession), RNGSession.SIZE);
      Register(typeof(Shape2D), Shape2D.SIZE);
      Register(typeof(Shape3D), Shape3D.SIZE);
      Register(typeof(SpringJoint), SpringJoint.SIZE);
      Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      Register(typeof(Quantum.StatModifier), Quantum.StatModifier.SIZE);
      Register(typeof(Quantum.Target), Quantum.Target.SIZE);
      Register(typeof(Transform2D), Transform2D.SIZE);
      Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      Register(typeof(Transform3D), Transform3D.SIZE);
      Register(typeof(Quantum.Unit), Quantum.Unit.SIZE);
      Register(typeof(Quantum.UnitAI), Quantum.UnitAI.SIZE);
      Register(typeof(Quantum.UnitBehavior), Quantum.UnitBehavior.SIZE);
      Register(typeof(Quantum.UnitBehavior_Lifetime), Quantum.UnitBehavior_Lifetime.SIZE);
      Register(typeof(Quantum.UnitBehavior_SpawnOnDeath), Quantum.UnitBehavior_SpawnOnDeath.SIZE);
      Register(typeof(Quantum.UnitBehavior_Spawner), Quantum.UnitBehavior_Spawner.SIZE);
      Register(typeof(Quantum.UnitStat), Quantum.UnitStat.SIZE);
      Register(typeof(Quantum.UnitStats), Quantum.UnitStats.SIZE);
      Register(typeof(View), View.SIZE);
      Register(typeof(Quantum.Weapon), Quantum.Weapon.SIZE);
      Register(typeof(Quantum.WeaponBehavior), Quantum.WeaponBehavior.SIZE);
      Register(typeof(Quantum.WeaponBehavior_Projectile), Quantum.WeaponBehavior_Projectile.SIZE);
      Register(typeof(Quantum.WeaponBehavior_SingleTarget), Quantum.WeaponBehavior_SingleTarget.SIZE);
      Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
  }
  public unsafe partial class FramePrinterGen {
    public static void EnsureNotStripped() {
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefCardSettings>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGameplaySettings>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EEffectAreaState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EEffectAreaTarget>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EGameplayState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EHealthAction>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ERarity>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EStatType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ETargetType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ETargetTypeFlags>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EWeaponState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
    }
  }
}
namespace Quantum.Prototypes {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  [System.SerializableAttribute()]
  [Prototype(typeof(EEffectAreaState))]
  public unsafe partial struct EEffectAreaState_Prototype {
    public Byte Value;
    public static implicit operator EEffectAreaState(EEffectAreaState_Prototype value) {
        return (EEffectAreaState)value.Value;
    }
    public static implicit operator EEffectAreaState_Prototype(EEffectAreaState value) {
        return new EEffectAreaState_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EEffectAreaTarget))]
  public unsafe partial struct EEffectAreaTarget_Prototype {
    public Byte Value;
    public static implicit operator EEffectAreaTarget(EEffectAreaTarget_Prototype value) {
        return (EEffectAreaTarget)value.Value;
    }
    public static implicit operator EEffectAreaTarget_Prototype(EEffectAreaTarget value) {
        return new EEffectAreaTarget_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EGameplayState))]
  public unsafe partial struct EGameplayState_Prototype {
    public Int32 Value;
    public static implicit operator EGameplayState(EGameplayState_Prototype value) {
        return (EGameplayState)value.Value;
    }
    public static implicit operator EGameplayState_Prototype(EGameplayState value) {
        return new EGameplayState_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EHealthAction))]
  public unsafe partial struct EHealthAction_Prototype {
    public Byte Value;
    public static implicit operator EHealthAction(EHealthAction_Prototype value) {
        return (EHealthAction)value.Value;
    }
    public static implicit operator EHealthAction_Prototype(EHealthAction value) {
        return new EHealthAction_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EStatType))]
  public unsafe partial struct EStatType_Prototype {
    public Byte Value;
    public static implicit operator EStatType(EStatType_Prototype value) {
        return (EStatType)value.Value;
    }
    public static implicit operator EStatType_Prototype(EStatType value) {
        return new EStatType_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ETargetType))]
  public unsafe partial struct ETargetType_Prototype {
    public Byte Value;
    public static implicit operator ETargetType(ETargetType_Prototype value) {
        return (ETargetType)value.Value;
    }
    public static implicit operator ETargetType_Prototype(ETargetType value) {
        return new ETargetType_Prototype() { Value = (Byte)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ETargetTypeFlags))]
  public unsafe partial struct ETargetTypeFlags_Prototype {
    public Int32 Value;
    public static implicit operator ETargetTypeFlags(ETargetTypeFlags_Prototype value) {
        return (ETargetTypeFlags)value.Value;
    }
    public static implicit operator ETargetTypeFlags_Prototype(ETargetTypeFlags value) {
        return new ETargetTypeFlags_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EWeaponState))]
  public unsafe partial struct EWeaponState_Prototype {
    public Int32 Value;
    public static implicit operator EWeaponState(EWeaponState_Prototype value) {
        return (EWeaponState)value.Value;
    }
    public static implicit operator EWeaponState_Prototype(EWeaponState value) {
        return new EWeaponState_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(InputButtons))]
  public unsafe partial struct InputButtons_Prototype {
    public Int32 Value;
    public static implicit operator InputButtons(InputButtons_Prototype value) {
        return (InputButtons)value.Value;
    }
    public static implicit operator InputButtons_Prototype(InputButtons value) {
        return new InputButtons_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(KeyValuePair<Int32, UnitStat>))]
  public unsafe partial class DictionaryEntry_Int32_UnitStat_Prototype : DictionaryEntryPrototype {
    public Int32 Key;
    public UnitStat_Prototype Value;
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BlockedArea))]
  public sealed unsafe partial class BlockedArea_Prototype : StructPrototype {
    public MapEntityId Entity;
    public SByte MinX;
    public SByte MaxX;
    public SByte MinY;
    public SByte MaxY;
    public QBoolean Enabled;
    partial void MaterializeUser(Frame frame, ref BlockedArea result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BlockedArea result, in PrototypeMaterializationContext context) {
      result.Enabled = this.Enabled;
      PrototypeValidator.FindMapEntity(this.Entity, in context, out result.Entity);
      result.MaxX = this.MaxX;
      result.MaxY = this.MaxY;
      result.MinX = this.MinX;
      result.MinY = this.MinY;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Buff))]
  public sealed unsafe partial class Buff_Prototype : ComponentPrototype<Buff> {
    [DynamicCollectionAttribute()]
    public BuffBehavior_Prototype[] Behaviors = {};
    partial void MaterializeUser(Frame frame, ref Buff result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Buff component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Buff result, in PrototypeMaterializationContext context) {
      if (this.Behaviors.Length == 0) {
        result.Behaviors = default;
      } else {
        var list = frame.AllocateList(result.Behaviors, this.Behaviors.Length);
        for (int i = 0; i < this.Behaviors.Length; ++i) {
          Quantum.BuffBehavior tmp = default;
          this.Behaviors[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.Behaviors = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BuffBehavior))]
  public sealed unsafe partial class BuffBehavior_Prototype : UnionPrototype {
    public string _field_used_;
    public BuffBehavior_Duration_Prototype Duration;
    public BuffBehavior_HealthOverTime_Prototype HealthOverTime;
    public BuffBehavior_Stats_Prototype Stats;
    partial void MaterializeUser(Frame frame, ref BuffBehavior result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BuffBehavior result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "DURATION": this.Duration.Materialize(frame, ref *result.Duration, in context); break;
        case "HEALTHOVERTIME": this.HealthOverTime.Materialize(frame, ref *result.HealthOverTime, in context); break;
        case "STATS": this.Stats.Materialize(frame, ref *result.Stats, in context); break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BuffBehavior_Duration))]
  public sealed unsafe partial class BuffBehavior_Duration_Prototype : StructPrototype {
    public FP MaxDuration;
    public FP DurationPerLevelIncrease;
    partial void MaterializeUser(Frame frame, ref BuffBehavior_Duration result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BuffBehavior_Duration result, in PrototypeMaterializationContext context) {
      result.DurationPerLevelIncrease = this.DurationPerLevelIncrease;
      result.MaxDuration = this.MaxDuration;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BuffBehavior_HealthOverTime))]
  public sealed unsafe partial class BuffBehavior_HealthOverTime_Prototype : StructPrototype {
    public FP ValuePerTick;
    public FP ValuePerLevelIncrease;
    public EHealthAction_Prototype Action;
    public FP TickTime;
    public Byte TickCount;
    partial void MaterializeUser(Frame frame, ref BuffBehavior_HealthOverTime result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BuffBehavior_HealthOverTime result, in PrototypeMaterializationContext context) {
      result.Action = this.Action;
      result.TickCount = this.TickCount;
      result.TickTime = this.TickTime;
      result.ValuePerLevelIncrease = this.ValuePerLevelIncrease;
      result.ValuePerTick = this.ValuePerTick;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BuffBehavior_Stats))]
  public sealed unsafe partial class BuffBehavior_Stats_Prototype : StructPrototype {
    public EStatType_Prototype StatType;
    public FP AbsoluteValue;
    public FP PercentValue;
    public FP ValuePerLevelIncrease;
    partial void MaterializeUser(Frame frame, ref BuffBehavior_Stats result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BuffBehavior_Stats result, in PrototypeMaterializationContext context) {
      result.AbsoluteValue = this.AbsoluteValue;
      result.PercentValue = this.PercentValue;
      result.StatType = this.StatType;
      result.ValuePerLevelIncrease = this.ValuePerLevelIncrease;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Buffs))]
  public sealed unsafe partial class Buffs_Prototype : ComponentPrototype<Buffs> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Buffs result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Buffs component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Buffs result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(CardInfo))]
  public sealed unsafe partial class CardInfo_Prototype : StructPrototype {
    public AssetRefCardSettings CardSettings;
    public Byte Level;
    public FP BaseHealth;
    public FP Damage;
    partial void MaterializeUser(Frame frame, ref CardInfo result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref CardInfo result, in PrototypeMaterializationContext context) {
      result.BaseHealth = this.BaseHealth;
      result.CardSettings = this.CardSettings;
      result.Damage = this.Damage;
      result.Level = this.Level;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EffectArea))]
  public sealed unsafe partial class EffectArea_Prototype : ComponentPrototype<EffectArea> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref EffectArea result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      EffectArea component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref EffectArea result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EffectAreaBehavior))]
  public sealed unsafe partial class EffectAreaBehavior_Prototype : UnionPrototype {
    public string _field_used_;
    public EffectAreaBehavior_Damage_Prototype Damage;
    public EffectAreaBehavior_Buff_Prototype Buff;
    partial void MaterializeUser(Frame frame, ref EffectAreaBehavior result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref EffectAreaBehavior result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "BUFF": this.Buff.Materialize(frame, ref *result.Buff, in context); break;
        case "DAMAGE": this.Damage.Materialize(frame, ref *result.Damage, in context); break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EffectAreaBehavior_Buff))]
  public sealed unsafe partial class EffectAreaBehavior_Buff_Prototype : StructPrototype {
    public AssetRefEntityPrototype Buff;
    partial void MaterializeUser(Frame frame, ref EffectAreaBehavior_Buff result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref EffectAreaBehavior_Buff result, in PrototypeMaterializationContext context) {
      result.Buff = this.Buff;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EffectAreaBehavior_Damage))]
  public sealed unsafe partial class EffectAreaBehavior_Damage_Prototype : StructPrototype {
    public FP Damage;
    public FP DamagePerLevelPercent;
    partial void MaterializeUser(Frame frame, ref EffectAreaBehavior_Damage result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref EffectAreaBehavior_Damage result, in PrototypeMaterializationContext context) {
      result.Damage = this.Damage;
      result.DamagePerLevelPercent = this.DamagePerLevelPercent;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Gameplay))]
  public sealed unsafe partial class Gameplay_Prototype : ComponentPrototype<Gameplay> {
    [HideInInspector()]
    public Byte AlphaScore;
    [HideInInspector()]
    public Byte BetaScore;
    public MapEntityId AlphaCastle;
    public MapEntityId BetaCastle;
    [FreeOnComponentRemoved()]
    [DynamicCollectionAttribute()]
    public MapEntityId[] AlphaTowers = {};
    [FreeOnComponentRemoved()]
    [DynamicCollectionAttribute()]
    public MapEntityId[] BetaTowers = {};
    public PlayerArea_Prototype AlphaArea;
    public PlayerArea_Prototype BetaArea;
    partial void MaterializeUser(Frame frame, ref Gameplay result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Gameplay component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Gameplay result, in PrototypeMaterializationContext context) {
      this.AlphaArea.Materialize(frame, ref result.AlphaArea, in context);
      PrototypeValidator.FindMapEntity(this.AlphaCastle, in context, out result.AlphaCastle);
      result.AlphaScore = this.AlphaScore;
      if (this.AlphaTowers.Length == 0) {
        result.AlphaTowers = default;
      } else {
        var list = frame.AllocateList(result.AlphaTowers, this.AlphaTowers.Length);
        for (int i = 0; i < this.AlphaTowers.Length; ++i) {
          EntityRef tmp = default;
          PrototypeValidator.FindMapEntity(this.AlphaTowers[i], in context, out tmp);
          list.Add(tmp);
        }
        result.AlphaTowers = list;
      }
      this.BetaArea.Materialize(frame, ref result.BetaArea, in context);
      PrototypeValidator.FindMapEntity(this.BetaCastle, in context, out result.BetaCastle);
      result.BetaScore = this.BetaScore;
      if (this.BetaTowers.Length == 0) {
        result.BetaTowers = default;
      } else {
        var list = frame.AllocateList(result.BetaTowers, this.BetaTowers.Length);
        for (int i = 0; i < this.BetaTowers.Length; ++i) {
          EntityRef tmp = default;
          PrototypeValidator.FindMapEntity(this.BetaTowers[i], in context, out tmp);
          list.Add(tmp);
        }
        result.BetaTowers = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Health))]
  public sealed unsafe partial class Health_Prototype : ComponentPrototype<Health> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Health result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Health component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Health result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(HealthData))]
  public sealed unsafe partial class HealthData_Prototype : StructPrototype {
    public FP Value;
    public MapEntityId Target;
    public PlayerRef TargetOwner;
    public MapEntityId Source;
    public EHealthAction_Prototype Action;
    public QBoolean HideToStats;
    partial void MaterializeUser(Frame frame, ref HealthData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref HealthData result, in PrototypeMaterializationContext context) {
      result.Action = this.Action;
      result.HideToStats = this.HideToStats;
      PrototypeValidator.FindMapEntity(this.Source, in context, out result.Source);
      PrototypeValidator.FindMapEntity(this.Target, in context, out result.Target);
      result.TargetOwner = this.TargetOwner;
      result.Value = this.Value;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Input))]
  public sealed unsafe partial class Input_Prototype : StructPrototype {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Input result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Movement))]
  public sealed unsafe partial class Movement_Prototype : ComponentPrototype<Movement> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Movement result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Movement component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Movement result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerArea))]
  public sealed unsafe partial class PlayerArea_Prototype : StructPrototype {
    public SByte MinX;
    public SByte MaxX;
    public SByte MinY;
    public SByte MaxY;
    [FreeOnComponentRemoved()]
    [DynamicCollectionAttribute()]
    public BlockedArea_Prototype[] BlockedAreas = {};
    partial void MaterializeUser(Frame frame, ref PlayerArea result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref PlayerArea result, in PrototypeMaterializationContext context) {
      if (this.BlockedAreas.Length == 0) {
        result.BlockedAreas = default;
      } else {
        var list = frame.AllocateList(result.BlockedAreas, this.BlockedAreas.Length);
        for (int i = 0; i < this.BlockedAreas.Length; ++i) {
          Quantum.BlockedArea tmp = default;
          this.BlockedAreas[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.BlockedAreas = list;
      }
      result.MaxX = this.MaxX;
      result.MaxY = this.MaxY;
      result.MinX = this.MinX;
      result.MinY = this.MinY;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Projectile))]
  public sealed unsafe partial class Projectile_Prototype : ComponentPrototype<Projectile> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Projectile result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Projectile component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Projectile result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ProjectileBehavior))]
  public sealed unsafe partial class ProjectileBehavior_Prototype : UnionPrototype {
    public string _field_used_;
    public ProjectileBehavior_SingleTarget_Prototype SingleTarget;
    public ProjectileBehavior_AoE_Prototype AoE;
    partial void MaterializeUser(Frame frame, ref ProjectileBehavior result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref ProjectileBehavior result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "AOE": this.AoE.Materialize(frame, ref *result.AoE, in context); break;
        case "SINGLETARGET": this.SingleTarget.Materialize(frame, ref *result.SingleTarget, in context); break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ProjectileBehavior_AoE))]
  public sealed unsafe partial class ProjectileBehavior_AoE_Prototype : StructPrototype {
    public AssetRefEntityPrototype Prototype;
    public FP Radius;
    public FP Damage;
    public FP DamagePerLevelPercent;
    partial void MaterializeUser(Frame frame, ref ProjectileBehavior_AoE result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref ProjectileBehavior_AoE result, in PrototypeMaterializationContext context) {
      result.Damage = this.Damage;
      result.DamagePerLevelPercent = this.DamagePerLevelPercent;
      result.Prototype = this.Prototype;
      result.Radius = this.Radius;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ProjectileBehavior_SingleTarget))]
  public sealed unsafe partial class ProjectileBehavior_SingleTarget_Prototype : StructPrototype {
    public FP Damage;
    public FP DamagePerLevelPercent;
    partial void MaterializeUser(Frame frame, ref ProjectileBehavior_SingleTarget result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref ProjectileBehavior_SingleTarget result, in PrototypeMaterializationContext context) {
      result.Damage = this.Damage;
      result.DamagePerLevelPercent = this.DamagePerLevelPercent;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(StatModifier))]
  public sealed unsafe partial class StatModifier_Prototype : StructPrototype {
    public FP AbsoluteValue;
    public FP PercentValue;
    partial void MaterializeUser(Frame frame, ref StatModifier result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref StatModifier result, in PrototypeMaterializationContext context) {
      result.AbsoluteValue = this.AbsoluteValue;
      result.PercentValue = this.PercentValue;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Target))]
  public sealed unsafe partial class Target_Prototype : ComponentPrototype<Target> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Target result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Target component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Target result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Unit))]
  public sealed unsafe partial class Unit_Prototype : ComponentPrototype<Unit> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Unit result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Unit component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Unit result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UnitAI))]
  public sealed unsafe partial class UnitAI_Prototype : ComponentPrototype<UnitAI> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref UnitAI result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      UnitAI component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref UnitAI result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UnitBehavior))]
  public sealed unsafe partial class UnitBehavior_Prototype : UnionPrototype {
    public string _field_used_;
    public UnitBehavior_Spawner_Prototype Spawner;
    public UnitBehavior_Lifetime_Prototype Lifetime;
    public UnitBehavior_SpawnOnDeath_Prototype SpawnOnDeath;
    partial void MaterializeUser(Frame frame, ref UnitBehavior result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref UnitBehavior result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "LIFETIME": this.Lifetime.Materialize(frame, ref *result.Lifetime, in context); break;
        case "SPAWNONDEATH": this.SpawnOnDeath.Materialize(frame, ref *result.SpawnOnDeath, in context); break;
        case "SPAWNER": this.Spawner.Materialize(frame, ref *result.Spawner, in context); break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UnitBehavior_Lifetime))]
  public sealed unsafe partial class UnitBehavior_Lifetime_Prototype : StructPrototype {
    public FP Duration;
    public QBoolean RemoveHealth;
    partial void MaterializeUser(Frame frame, ref UnitBehavior_Lifetime result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref UnitBehavior_Lifetime result, in PrototypeMaterializationContext context) {
      result.Duration = this.Duration;
      result.RemoveHealth = this.RemoveHealth;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UnitBehavior_SpawnOnDeath))]
  public sealed unsafe partial class UnitBehavior_SpawnOnDeath_Prototype : StructPrototype {
    public AssetRefCardSettings Card;
    public FPVector2 Offset;
    partial void MaterializeUser(Frame frame, ref UnitBehavior_SpawnOnDeath result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref UnitBehavior_SpawnOnDeath result, in PrototypeMaterializationContext context) {
      result.Card = this.Card;
      result.Offset = this.Offset;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UnitBehavior_Spawner))]
  public sealed unsafe partial class UnitBehavior_Spawner_Prototype : StructPrototype {
    public AssetRefCardSettings Card;
    public FP SpawnTime;
    public FPVector2 Offset;
    partial void MaterializeUser(Frame frame, ref UnitBehavior_Spawner result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref UnitBehavior_Spawner result, in PrototypeMaterializationContext context) {
      result.Card = this.Card;
      result.Offset = this.Offset;
      result.SpawnTime = this.SpawnTime;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UnitStat))]
  public sealed unsafe partial class UnitStat_Prototype : StructPrototype {
    public Byte Flags;
    public FP FinalValue;
    public FP BaseValue;
    public FP MaxValue;
    [DynamicCollectionAttribute()]
    public StatModifier_Prototype[] StatModifiers = {};
    partial void MaterializeUser(Frame frame, ref UnitStat result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref UnitStat result, in PrototypeMaterializationContext context) {
      result.BaseValue = this.BaseValue;
      result.FinalValue = this.FinalValue;
      result.Flags = this.Flags;
      result.MaxValue = this.MaxValue;
      if (this.StatModifiers.Length == 0) {
        result.StatModifiers = default;
      } else {
        var list = frame.AllocateList(result.StatModifiers, this.StatModifiers.Length);
        for (int i = 0; i < this.StatModifiers.Length; ++i) {
          Quantum.StatModifier tmp = default;
          this.StatModifiers[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.StatModifiers = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UnitStats))]
  public sealed unsafe partial class UnitStats_Prototype : ComponentPrototype<UnitStats> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref UnitStats result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      UnitStats component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref UnitStats result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Weapon))]
  public sealed unsafe partial class Weapon_Prototype : ComponentPrototype<Weapon> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Weapon result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Weapon component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Weapon result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(WeaponBehavior))]
  public sealed unsafe partial class WeaponBehavior_Prototype : UnionPrototype {
    public string _field_used_;
    public WeaponBehavior_SingleTarget_Prototype SingleTarget;
    public WeaponBehavior_Projectile_Prototype Projectile;
    partial void MaterializeUser(Frame frame, ref WeaponBehavior result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref WeaponBehavior result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "PROJECTILE": this.Projectile.Materialize(frame, ref *result.Projectile, in context); break;
        case "SINGLETARGET": this.SingleTarget.Materialize(frame, ref *result.SingleTarget, in context); break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(WeaponBehavior_Projectile))]
  public sealed unsafe partial class WeaponBehavior_Projectile_Prototype : StructPrototype {
    public AssetRefEntityPrototype Prototype;
    public FP Speed;
    public ProjectileBehavior_Prototype Behavior;
    partial void MaterializeUser(Frame frame, ref WeaponBehavior_Projectile result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref WeaponBehavior_Projectile result, in PrototypeMaterializationContext context) {
      this.Behavior.Materialize(frame, ref result.Behavior, in context);
      result.Prototype = this.Prototype;
      result.Speed = this.Speed;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(WeaponBehavior_SingleTarget))]
  public sealed unsafe partial class WeaponBehavior_SingleTarget_Prototype : StructPrototype {
    public FP Damage;
    public FP DamagePerLevelPercent;
    partial void MaterializeUser(Frame frame, ref WeaponBehavior_SingleTarget result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref WeaponBehavior_SingleTarget result, in PrototypeMaterializationContext context) {
      result.Damage = this.Damage;
      result.DamagePerLevelPercent = this.DamagePerLevelPercent;
      MaterializeUser(frame, ref result, in context);
    }
  }
  public unsafe partial class FlatEntityPrototypeContainer {
    [ArrayLength(0, 1)]
    public List<Prototypes.Buff_Prototype> Buff;
    [ArrayLength(0, 1)]
    public List<Prototypes.Buffs_Prototype> Buffs;
    [ArrayLength(0, 1)]
    public List<Prototypes.EffectArea_Prototype> EffectArea;
    [ArrayLength(0, 1)]
    public List<Prototypes.Gameplay_Prototype> Gameplay;
    [ArrayLength(0, 1)]
    public List<Prototypes.Health_Prototype> Health;
    [ArrayLength(0, 1)]
    public List<Prototypes.Movement_Prototype> Movement;
    [ArrayLength(0, 1)]
    public List<Prototypes.Projectile_Prototype> Projectile;
    [ArrayLength(0, 1)]
    public List<Prototypes.Target_Prototype> Target;
    [ArrayLength(0, 1)]
    public List<Prototypes.Unit_Prototype> Unit;
    [ArrayLength(0, 1)]
    public List<Prototypes.UnitAI_Prototype> UnitAI;
    [ArrayLength(0, 1)]
    public List<Prototypes.UnitStats_Prototype> UnitStats;
    [ArrayLength(0, 1)]
    public List<Prototypes.Weapon_Prototype> Weapon;
    partial void CollectGen(List<ComponentPrototype> target) {
      Collect(Buff, target);
      Collect(Buffs, target);
      Collect(EffectArea, target);
      Collect(Gameplay, target);
      Collect(Health, target);
      Collect(Movement, target);
      Collect(Projectile, target);
      Collect(Target, target);
      Collect(Unit, target);
      Collect(UnitAI, target);
      Collect(UnitStats, target);
      Collect(Weapon, target);
    }
    public unsafe partial class StoreVisitor {
      public override void Visit(Prototypes.Buff_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Buff);
      }
      public override void Visit(Prototypes.Buffs_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Buffs);
      }
      public override void Visit(Prototypes.EffectArea_Prototype prototype) {
        Storage.Store(prototype, ref Storage.EffectArea);
      }
      public override void Visit(Prototypes.Gameplay_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Gameplay);
      }
      public override void Visit(Prototypes.Health_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Health);
      }
      public override void Visit(Prototypes.Movement_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Movement);
      }
      public override void Visit(Prototypes.Projectile_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Projectile);
      }
      public override void Visit(Prototypes.Target_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Target);
      }
      public override void Visit(Prototypes.Unit_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Unit);
      }
      public override void Visit(Prototypes.UnitAI_Prototype prototype) {
        Storage.Store(prototype, ref Storage.UnitAI);
      }
      public override void Visit(Prototypes.UnitStats_Prototype prototype) {
        Storage.Store(prototype, ref Storage.UnitStats);
      }
      public override void Visit(Prototypes.Weapon_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Weapon);
      }
    }
  }
}
#pragma warning restore 0649
#pragma warning restore 1522
#pragma warning restore 0414
#pragma warning restore 0219
#pragma warning restore 0109
